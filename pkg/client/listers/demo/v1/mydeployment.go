/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "knative.dev/sample-controller/pkg/apis/demo/v1"
)

// MyDeploymentLister helps list MyDeployments.
// All objects returned here must be treated as read-only.
type MyDeploymentLister interface {
	// List lists all MyDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyDeployment, err error)
	// MyDeployments returns an object that can list and get MyDeployments.
	MyDeployments(namespace string) MyDeploymentNamespaceLister
	MyDeploymentListerExpansion
}

// myDeploymentLister implements the MyDeploymentLister interface.
type myDeploymentLister struct {
	indexer cache.Indexer
}

// NewMyDeploymentLister returns a new MyDeploymentLister.
func NewMyDeploymentLister(indexer cache.Indexer) MyDeploymentLister {
	return &myDeploymentLister{indexer: indexer}
}

// List lists all MyDeployments in the indexer.
func (s *myDeploymentLister) List(selector labels.Selector) (ret []*v1.MyDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyDeployment))
	})
	return ret, err
}

// MyDeployments returns an object that can list and get MyDeployments.
func (s *myDeploymentLister) MyDeployments(namespace string) MyDeploymentNamespaceLister {
	return myDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyDeploymentNamespaceLister helps list and get MyDeployments.
// All objects returned here must be treated as read-only.
type MyDeploymentNamespaceLister interface {
	// List lists all MyDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyDeployment, err error)
	// Get retrieves the MyDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.MyDeployment, error)
	MyDeploymentNamespaceListerExpansion
}

// myDeploymentNamespaceLister implements the MyDeploymentNamespaceLister
// interface.
type myDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyDeployments in the indexer for a given namespace.
func (s myDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1.MyDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyDeployment))
	})
	return ret, err
}

// Get retrieves the MyDeployment from the indexer for a given namespace and name.
func (s myDeploymentNamespaceLister) Get(name string) (*v1.MyDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mydeployment"), name)
	}
	return obj.(*v1.MyDeployment), nil
}
